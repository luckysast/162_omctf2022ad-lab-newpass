package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"
	"github.com/pkg/errors"
	"project/models"
)

// PasswordResource is the resource for the link model
type PasswordResource struct {
	buffalo.Resource
}

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Password)
// DB Table: Plural (passwords)
// Resource: Plural (Passwords)
// Path: Plural (/passwords)
// View Template Folder: Plural (/templates/passwords/)

// List gets all Passwords. This function is mapped to the path
// GET /passwords
func PasswordsList(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection) // you get your connection here
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	cuid := c.Session().Get("current_user_id")
	passwords := &models.Passwords{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.RawQuery("select * from passwords where user_id = ?", cuid).PaginateFromParams(c.Params())

	// Retrieve all Passwords from the DB
	if err := q.All(passwords); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("passwords", passwords)
		return c.Render(http.StatusOK, r.HTML("passwords/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(passwords))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(passwords))
	}).Respond(c)
}

// Show gets the data for one Password. This function is mapped to
// the path GET /passwords/{password_id}
func PasswordsShow(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection) // you get your connection here
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}
	// Allocate an empty Password
	password := &models.Password{}
	cuid := c.Session().Get("current_user_id")

	// To find the Password the parameter password_id is used.
	if err := tx.RawQuery("select * from passwords where id = '" + c.Param("password_id") + "' and user_id = ?", cuid).First(password); err != nil {
		return errors.WithStack(err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("password", password)

		return c.Render(http.StatusOK, r.HTML("passwords/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(password))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(password))
	}).Respond(c)
}

// New renders the form for creating a new Password.
// This function is mapped to the path GET /passwords/new
func PasswordsNew(c buffalo.Context) error {
	c.Set("password", &models.Password{})

	return c.Render(http.StatusOK, r.HTML("passwords/new.plush.html"))
}

// Create adds a Password to the DB. This function is mapped to the
// path POST /passwords
func PasswordsCreate(c buffalo.Context) error {
	// Allocate an empty Password
	password := &models.Password{}

	// Bind password to the html form elements
	if err := c.Bind(password); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	user := c.Value("current_user").(*models.User)
	password.UserID = user.ID

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(password)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("password", password)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("passwords/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "password.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/passwords")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(password))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(password))
	}).Respond(c)
}